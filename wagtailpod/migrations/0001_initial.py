# Generated by Django 4.0.8 on 2022-12-18 17:12

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import modelcluster.contrib.taggit
import modelcluster.fields
import re
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail_color_panel.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0004_alter_taggeditem_content_type_alter_taggeditem_tag'),
        ('wagtailmedia', '0004_duration_optional_floatfield'),
        ('wagtailcore', '0078_referenceindex'),
        ('wagtailimages', '0024_index_image_file_hash'),
    ]

    operations = [
        migrations.CreateModel(
            name='PodcastPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('date', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Post Date')),
                ('description', wagtail.fields.RichTextField()),
                ('body', wagtail.fields.StreamField([('heading', wagtail.blocks.StructBlock([('heading_level', wagtail.blocks.ChoiceBlock(choices=[('h2', 'Level 2 (child of level 1)'), ('h3', 'Level 3 (child of level 2)'), ('h4', 'Level 4 (child of level 3)'), ('h5', 'Level 5 (child of level 4)'), ('h6', 'Level 6 (child of level 5)')], help_text='These different heading levels help to communicate the organization and hierarchy of the content on a page.')), ('heading_text', wagtail.blocks.CharBlock(help_text='The text to appear in the heading.')), ('target_slug', wagtail.blocks.CharBlock(help_text='Used to link to a specific location within this page. A slug should only contain letters, numbers, underscore (_), or hyphen (-).', required=False, validators=(django.core.validators.RegexValidator(re.compile('^[-a-zA-Z0-9_]+\\Z'), 'Enter a valid “slug” consisting of letters, numbers, underscores or hyphens.', 'invalid'),))), ('color', wagtail_color_panel.blocks.NativeColorBlock(required=False))])), ('rich_text', wagtail.blocks.RichTextBlock()), ('image', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('width', wagtail.blocks.IntegerBlock(help_text='Enter the desired image width value in pixels up to 800 max.', max_value=800, min_value=0))])), ('spacer', wagtail.blocks.StructBlock([('height', wagtail.blocks.DecimalBlock(decimal_places=1, help_text="The height of this spacer in 'em' values where 1 em is one uppercase M.", min_value=0))]))], blank=True, null=True, use_json_field=True)),
                ('audio', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailmedia.media')),
                ('sode_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='PodIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('subtitle', models.CharField(default='changeme', max_length=250)),
                ('author', models.CharField(default='Dan and Luke', max_length=250)),
                ('itunes_name', models.CharField(default='DCBC', max_length=250)),
                ('author_email', models.CharField(default='dcbc@dontcallitabookclub.com', max_length=250)),
                ('description', wagtail.fields.RichTextField()),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='PodcastPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='podcast_tags', to='wagtailpod.podcastpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='podcastpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='wagtailpod.PodcastPageTag', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
